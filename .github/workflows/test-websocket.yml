name: WebSocket Client Test (Remote Server)

on:
  push:
    branches: [ main, master, dev ]
  pull_request:
    branches: [ main, master, dev ]
  workflow_dispatch:
    inputs:
      server_host:
        description: 'Server Host (留空则使用 Secrets)'
        required: false
        type: string
      server_port:
        description: 'Server Port (留空则使用 Secrets)'
        required: false
        type: string

jobs:
  test-websocket:
    runs-on: ubuntu-latest
    timeout-minutes: 200
    
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Install quotient directly from GitHub
        git clone https://${{ secrets.CLONE_QUOTIENT }}@github.com/trades-platform/quotient.git
        pip install ./quotient
        pip install websockets
    
    - name: Configure remote server settings
      env:
        INPUT_SERVER_HOST: ${{ github.event.inputs.server_host }}
        INPUT_SERVER_PORT: ${{ github.event.inputs.server_port }}
        SECRET_SERVER_HOST: ${{ secrets.WEBSOCKET_SERVER_HOST }}
        SECRET_SERVER_PORT: ${{ secrets.WEBSOCKET_SERVER_PORT }}
      run: |
        # 优先级: Secrets > 手动输入 > 默认值
        if [ -n "$SECRET_SERVER_HOST" ]; then
          SERVER_HOST="$SECRET_SERVER_HOST"
          echo "✅ 使用 Secret: WEBSOCKET_SERVER_HOST"
        elif [ -n "$INPUT_SERVER_HOST" ]; then
          SERVER_HOST="$INPUT_SERVER_HOST"
          echo "✅ 使用手动输入的 Host"
        else
          SERVER_HOST="localhost"
          echo "⚠️  使用默认 Host: localhost"
        fi
        
        if [ -n "$SECRET_SERVER_PORT" ]; then
          SERVER_PORT="$SECRET_SERVER_PORT"
          echo "✅ 使用 Secret: WEBSOCKET_SERVER_PORT"
        elif [ -n "$INPUT_SERVER_PORT" ]; then
          SERVER_PORT="$INPUT_SERVER_PORT"
          echo "✅ 使用手动输入的 Port"
        else
          SERVER_PORT="8765"
          echo "⚠️  使用默认 Port: 8765"
        fi
        
        echo "SERVER_HOST=$SERVER_HOST" >> $GITHUB_ENV
        echo "SERVER_PORT=$SERVER_PORT" >> $GITHUB_ENV
        
        echo ""
        echo "📋 配置: $SERVER_HOST:$SERVER_PORT"
    
    - name: Test server connectivity
      run: |
        echo "🔍 测试服务器连接: $SERVER_HOST:$SERVER_PORT"
        python << 'PYEOF'
        import socket
        import sys
        import os
        
        host = os.environ.get('SERVER_HOST', 'localhost')
        port = int(os.environ.get('SERVER_PORT', '8765'))
        
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(5)
            result = sock.connect_ex((host, port))
            sock.close()
            
            if result == 0:
                print('✅ 服务器可访问')
            else:
                print('⚠️  无法连接到服务器')
        except Exception as e:
            print(f'⚠️  连接测试失败: {e}')
        PYEOF
    
    - name: Start client
      run: |
        echo "🚀 启动客户端 (运行 3 小时)..."
        echo "   连接到: ws://$SERVER_HOST:$SERVER_PORT"
        python client.py $SERVER_HOST $SERVER_PORT &
        CLIENT_PID=$!
        echo "CLIENT_PID=$CLIENT_PID" >> $GITHUB_ENV
        echo "✅ Client PID: $CLIENT_PID"
        echo "⏱️  将运行 3 小时 (10800 秒)"
        sleep 5
    
    - name: Monitor client for 3 hours
      run: |
        echo "⏱️  监控 3 小时 (每 5 分钟检查一次)..."
        
        DURATION=10800
        INTERVAL=300
        ELAPSED=0
        CHECK_COUNT=0
        
        while [ $ELAPSED -lt $DURATION ]; do
          sleep $INTERVAL
          ELAPSED=$((ELAPSED + INTERVAL))
          CHECK_COUNT=$((CHECK_COUNT + 1))
          
          HOURS=$((ELAPSED / 3600))
          MINUTES=$(((ELAPSED % 3600) / 60))
          
          if ps -p $CLIENT_PID > /dev/null; then
            echo "✅ [${CHECK_COUNT}] Client 运行中 - 已运行: ${HOURS}h ${MINUTES}m"
          else
            echo "❌ Client 已停止 - 运行时长: ${HOURS}h ${MINUTES}m"
            exit 1
          fi
        done
        
        echo ""
        echo "✅ 测试完成 - Client 成功运行 3 小时"
    
    - name: Cleanup
      if: always()
      run: |
        if ps -p $CLIENT_PID > /dev/null 2>&1; then
          kill $CLIENT_PID || true
          echo "✅ Client 已停止"
        fi
